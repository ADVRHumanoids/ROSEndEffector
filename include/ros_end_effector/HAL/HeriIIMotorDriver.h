#ifndef HERI_II_MOTOR_DRIVER_H
#define HERI_II_MOTOR_DRIVER_H

#include <xbot2/hal/device.h>
#include <xbot2/client_server/client_manager.h>

#include "HeriIIMotorPacket.h"

/* This file defines the class that implements the client side
 * of the link between the robot (in simulation, our rocket gazebo plugin)
 * and the xbot2 framework.
 *
 * If there is no client-side logic to be implemented, this can be
 * pure boilerplate code that can be autogenerated.
 *
 * However, there are some additional possibilities, as detailed below.
 *
 */

namespace XBot { namespace Hal {

/**
 * @brief The RocketDriver class, by inheriting DeviceInstanceTpl,
 * automatically connects the rx and tx data for a single rocket device
 * to the xbot2 framework.
 *
 * Optionally, the developer can
 *  - override sense_impl(), to customize how the incoming rx data
 *    (from the robot or gazebo) are propagated to the framework;
 *    for instance, one could apply a filter to mitigate noise in
 *    the measurments
 *  - override move_impl(), to customize how the tx from the framework
 *    are broadcast to gazebo (or the robot); in the following example,
 *    we apply a simple timout to the thrust reference so that, if no
 *    command is received for 2 seconds, the thrust ref is set to zero.
 *    Hard limits or filtering can also be implemented.
 */

class HeriIIMotorDriver : public DeviceDriverTpl<HeriIIMotorPacket::Rx, HeriIIMotorPacket::Tx> 
{
    
public:

    HeriIIMotorDriver(DeviceInfo devinfo);

    /**
     * @brief move_impl allows to override the tx data from
     * the framework before it's actually sent to the device
     */
    bool move_impl() override;

    /**
     * @brief sense_impl allows to override the rx data from
     * the device before it's actually sent to the framework
     * @return if return false, rx is not actually sent to
     * the framework!
     */
    bool sense_impl() override;

private:
    unsigned short int finger_id;
    unsigned short int motor_in_finger_id;
    
    
};

class HeriIIMotorDriverContainer : public DeviceContainer<HeriIIMotorDriver>
{

public:

    HeriIIMotorDriverContainer(std::vector<DeviceInfo> devinfo);

    bool sense_all() override;

    bool move_all() override;

private:

    ClientManager::UniquePtr _cli;

};


}} //namespaces


#endif // HERI_II_MOTOR_DRIVER_H

