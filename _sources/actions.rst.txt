.. _actions:

ROS End-Effector Grasping Actions
=====================================

**TODO** check explain better this page

Grasping Primitives & Actions Finder Node
############################################

- This node will explore your robot model (i.e. *urdf* and *srdf* files) in order to find some grasping primitive actions (e.g. __pinch__, __trig__ ) that your end-effector can do. 

- MoveIt library is used to parse the models and to find collisions (e.g. to find the **pinches**)

- Information about each grasping action are stored in some *yaml* files, that can be parsed afterwards. The main information in the *yaml* files is the necessary position of the joints to perform that grasping action (see some examples [here](configs/actionExamples)).

- Additional grasping primitive actions can be added, deriving the c++ class or creating directly by hand the *yaml* file.


Custom Grasping Actions
#########################

- Generic Grasping Actions
  If the grasping actions found are not sufficient, you can create your custom ones as **generic**. This can be done creating a yaml file, or filling the C++ structures with the provided API. 

- Composed Grasping Actions
  A **composed** grasping action can be also created as a *sum* of others.

- Timed Grasping Actions
  There is also the possibility to create a **timed** grasping action, that is, an action which will execute other actions sequentially, separating each execution by a time margin.
